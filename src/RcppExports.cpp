// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_probs_ordered_logistic_cpp
NumericVector get_probs_ordered_logistic_cpp(const NumericVector thresholds, const double location, const double scale);
RcppExport SEXP _CCTLogistic_get_probs_ordered_logistic_cpp(SEXP thresholdsSEXP, SEXP locationSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< const double >::type location(locationSEXP);
    Rcpp::traits::input_parameter< const double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(get_probs_ordered_logistic_cpp(thresholds, location, scale));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CCTLogistic_get_probs_ordered_logistic_cpp", (DL_FUNC) &_CCTLogistic_get_probs_ordered_logistic_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_CCTLogistic(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
